// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "user-api/models"

	mock "github.com/stretchr/testify/mock"

	response "user-api/response"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: id
func (_m *UserRepo) DeleteById(id string) response.ApiError {
	ret := _m.Called(id)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(string) response.ApiError); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

// FindByField provides a mock function with given fields: value, key
func (_m *UserRepo) FindByField(value interface{}, key string) (models.User, response.ApiError) {
	ret := _m.Called(value, key)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(interface{}, string) models.User); ok {
		r0 = rf(value, key)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(interface{}, string) response.ApiError); ok {
		r1 = rf(value, key)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *UserRepo) FindById(id string) (models.User, response.ApiError) {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(string) response.ApiError); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, page
func (_m *UserRepo) GetAll(limit uint64, page uint64) ([]models.User, error) {
	ret := _m.Called(limit, page)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(uint64, uint64) []models.User); ok {
		r0 = rf(limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: u
func (_m *UserRepo) Save(u models.User) response.ApiError {
	ret := _m.Called(u)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(models.User) response.ApiError); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

// UpdateByID provides a mock function with given fields: id, u
func (_m *UserRepo) UpdateByID(id string, u models.User) response.ApiError {
	ret := _m.Called(id, u)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(string, models.User) response.ApiError); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
