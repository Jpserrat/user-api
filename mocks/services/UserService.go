// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "user-api/models"

	mock "github.com/stretchr/testify/mock"

	response "user-api/response"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// DeleteById provides a mock function with given fields: id
func (_m *UserService) DeleteById(id string) response.ApiError {
	ret := _m.Called(id)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(string) response.ApiError); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserService) FindByEmail(email string) (models.User, response.ApiError) {
	ret := _m.Called(email)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(string) response.ApiError); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *UserService) FindById(id string) (models.User, response.ApiError) {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(string) response.ApiError); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetAll(_a0 uint64, _a1 uint64) ([]models.User, response.ApiError) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(uint64, uint64) []models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(uint64, uint64) response.ApiError); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserService) Login(email string, password string) (string, response.ApiError) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 response.ApiError
	if rf, ok := ret.Get(1).(func(string, string) response.ApiError); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(response.ApiError)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *UserService) Register(_a0 models.User) response.ApiError {
	ret := _m.Called(_a0)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(models.User) response.ApiError); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

// UpdateById provides a mock function with given fields: id, u
func (_m *UserService) UpdateById(id string, u models.User) response.ApiError {
	ret := _m.Called(id, u)

	var r0 response.ApiError
	if rf, ok := ret.Get(0).(func(string, models.User) response.ApiError); ok {
		r0 = rf(id, u)
	} else {
		r0 = ret.Get(0).(response.ApiError)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
